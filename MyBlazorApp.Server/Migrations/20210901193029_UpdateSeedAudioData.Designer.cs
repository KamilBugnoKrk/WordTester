// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlazorApp.Server.Data;

namespace MyBlazorApp.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210901193029_UpdateSeedAudioData")]
    partial class UpdateSeedAudioData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Data.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Croatian",
                            VoiceName = "hr-HR-GabrijelaNeural"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Czech",
                            VoiceName = "cs-CZ-AntoninNeural"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Danish",
                            VoiceName = "da-DK-ChristelNeural"
                        },
                        new
                        {
                            Id = 4,
                            Name = "English - UK",
                            VoiceName = "en-GB-RyanNeural"
                        },
                        new
                        {
                            Id = 5,
                            Name = "English - US",
                            VoiceName = "en-US-BrandonNeural"
                        },
                        new
                        {
                            Id = 6,
                            Name = "German",
                            VoiceName = "de-DE-ConradNeural"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Spanish",
                            VoiceName = "es-ES-ElviraNeural"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Italian",
                            VoiceName = "it-IT-ElsaNeural"
                        });
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisibleForEveryone")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sample course for Polish learners. Majority of Words, Definitions, Pronunciations and Example Uses come from en.wiktionary.org",
                            IsVisibleForEveryone = true,
                            LanguageId = 5,
                            Name = "English B2+ course"
                        });
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.UsedRepetitionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RevisionTypeList")
                        .HasColumnType("int");

                    b.Property<int?>("WordStatsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordStatsId");

                    b.ToTable("UsedRepetitionTypes");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.UserCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExampleUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAudioGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pronunciation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslatedWord")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Definition = "extremely unpleasant or offensive",
                            ExampleUse = "Throwing stones at the bus is another example of your *obnoxious* behaviour.",
                            HasAudioGenerated = false,
                            OriginalWord = "obnoxious",
                            Pronunciation = "əbˈnɑkʃəs",
                            TranslatedWord = "wstrętny, okropny"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Definition = "deeply serious and sombre",
                            ExampleUse = "It is a song with a *solemn* message to young people.",
                            HasAudioGenerated = false,
                            OriginalWord = "solemn",
                            Pronunciation = "ˈsɑləm",
                            TranslatedWord = "poważny"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Definition = "unreliable, dangerous",
                            ExampleUse = "It is a *treacherous* mountain trail.",
                            HasAudioGenerated = false,
                            OriginalWord = "treacherous",
                            Pronunciation = "ˈtɹɛtʃɹəs",
                            TranslatedWord = "zdradliwy"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 1,
                            Definition = "to make (something) larger or more important",
                            ExampleUse = "Could you please *magnify* this image?",
                            HasAudioGenerated = false,
                            OriginalWord = "magnify",
                            Pronunciation = "ˈmæɡnɪfaɪ",
                            TranslatedWord = "powiększać"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 1,
                            Definition = "to cause to become smaller",
                            ExampleUse = "This garment will *shrink* when wet.",
                            HasAudioGenerated = false,
                            OriginalWord = "shrink",
                            Pronunciation = "ˈʃɹɪŋk",
                            TranslatedWord = "zmniejszać"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 1,
                            Definition = "reduced to poverty or having lost a component",
                            ExampleUse = "English has an *impoverished* inflectional system.",
                            HasAudioGenerated = false,
                            OriginalWord = "impoverished",
                            Pronunciation = "ɪmˈpɑvəɹɪʃt",
                            TranslatedWord = "biedny, ubogi"
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 1,
                            Definition = "after that, from then on",
                            ExampleUse = "He left; *thereafter* we never met again.",
                            HasAudioGenerated = false,
                            OriginalWord = "thereafter",
                            Pronunciation = "ˌðɛəɹˈæf.tɚ",
                            TranslatedWord = "potem, następnie"
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 1,
                            Definition = "out of the ordinary; odd; strange",
                            ExampleUse = "The sky had a *peculiar* appearance before the storm.",
                            HasAudioGenerated = false,
                            OriginalWord = "peculiar",
                            Pronunciation = "pəˈkjuːl.jʊəɹ",
                            TranslatedWord = "dziwny, osobliwy"
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 1,
                            Definition = "of a near-vertical gradient",
                            ExampleUse = "This hill is really *steep*.",
                            HasAudioGenerated = false,
                            OriginalWord = "steep",
                            Pronunciation = "stiːp",
                            TranslatedWord = "stromy"
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 1,
                            Definition = "an obese person",
                            ExampleUse = "If you don't want to be *stout* you should avoid eating sweets.",
                            HasAudioGenerated = false,
                            OriginalWord = "stout",
                            Pronunciation = "staʊt",
                            TranslatedWord = "tęgi"
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 1,
                            Definition = "having no hair",
                            ExampleUse = "He is a *bald* man with a moustache.",
                            HasAudioGenerated = false,
                            OriginalWord = "bald",
                            Pronunciation = "bɔld",
                            TranslatedWord = "łysy"
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 1,
                            Definition = "short, coarse hair, especially on a man’s face",
                            ExampleUse = "I can see your *stubble* - why haven't you shaved?",
                            HasAudioGenerated = false,
                            OriginalWord = "stubble",
                            Pronunciation = "ˈstʌb.əl",
                            TranslatedWord = "kilkudniowy zarost"
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 1,
                            Definition = "wearing clothes too formal",
                            ExampleUse = "The party will be only for my close friends, so don't be *overdressed*.",
                            HasAudioGenerated = false,
                            OriginalWord = "overdressed",
                            Pronunciation = "ˈoʊvɚdɹɛst",
                            TranslatedWord = "ubrany zbyt elegancko"
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 1,
                            Definition = "that which remains when use or need is satisfied, or when a limit is reached",
                            ExampleUse = "It is great that you've received a bonus - make the most of your *surplus* cash.",
                            HasAudioGenerated = false,
                            OriginalWord = "surplus",
                            Pronunciation = "ˈsɜːpləs",
                            TranslatedWord = "nadmiar"
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 1,
                            Definition = "goods which are or were offered or intended for sale",
                            ExampleUse = "Remember that good business depends on having good *merchandise*.",
                            HasAudioGenerated = false,
                            OriginalWord = "merchandise",
                            Pronunciation = "ˈmɜːtʃənˌdaɪz",
                            TranslatedWord = "towar w sklepie, na targowisku"
                        },
                        new
                        {
                            Id = 16,
                            CourseId = 1,
                            Definition = "genuine; meaning what one says or does; heartfelt",
                            ExampleUse = "I believe he is *sincere* in his offer to help.",
                            HasAudioGenerated = false,
                            OriginalWord = "sincere",
                            Pronunciation = "sɪnˈsɪə",
                            TranslatedWord = "szczery"
                        },
                        new
                        {
                            Id = 17,
                            CourseId = 1,
                            Definition = "to provide incentives for; to encourage",
                            ExampleUse = "The US government seeks to *incentivize* home ownership through a favorable tax system.",
                            HasAudioGenerated = false,
                            OriginalWord = "incentivize",
                            Pronunciation = "ɪnˈsɛntɪvaɪz",
                            TranslatedWord = "zachęcić"
                        },
                        new
                        {
                            Id = 18,
                            CourseId = 1,
                            Definition = "an opinion, belief, or principle that is held as absolute truth by someone or especially an organization",
                            ExampleUse = "The mutability of the past is the central *tenet* of Ingsoc.",
                            HasAudioGenerated = false,
                            OriginalWord = "tenet",
                            Pronunciation = "tɛnət",
                            TranslatedWord = "zasada, paradygmat"
                        });
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.WordStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("NextRevisionTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("NextRevisionTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("RevisionFactor")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsedRepetitionTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WordId");

                    b.ToTable("WordStats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MyBlazorApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MyBlazorApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlazorApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MyBlazorApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.Course", b =>
                {
                    b.HasOne("MyBlazorApp.Server.Data.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.UsedRepetitionType", b =>
                {
                    b.HasOne("MyBlazorApp.Server.Models.WordStats", "WordStats")
                        .WithMany()
                        .HasForeignKey("WordStatsId");

                    b.Navigation("WordStats");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.UserCourse", b =>
                {
                    b.HasOne("MyBlazorApp.Server.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlazorApp.Server.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.Word", b =>
                {
                    b.HasOne("MyBlazorApp.Server.Models.Course", "Course")
                        .WithMany("Words")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.WordStats", b =>
                {
                    b.HasOne("MyBlazorApp.Server.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlazorApp.Server.Models.Word", "Word")
                        .WithMany("WordStats")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.Course", b =>
                {
                    b.Navigation("UserCourses");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("MyBlazorApp.Server.Models.Word", b =>
                {
                    b.Navigation("WordStats");
                });
#pragma warning restore 612, 618
        }
    }
}
