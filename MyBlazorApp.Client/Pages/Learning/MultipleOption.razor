@* Copyright (C) 2021  Kamil Bugno
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.*@

@implements IDisposable
@inject HotKeys HotKeys

<div class="multiple-option-container">
    <h2 class="@GetStyle(Question)">@Question</h2>
    <audio id="audio" src="data:audio/wav;base64,@Audio" controls autoplay>
        <source id="source" src="data:audio/wav;base64,@Audio" type="audio/wav" />
    </audio>
    @if (!string.IsNullOrEmpty(Pronunciation))
    {
        <p>[@Pronunciation]</p>
    }
    else
    {
        <p></p>
    }
    <div class="response-container">
        @for (var i = 0; i < Responses.Count; i++)
        {
            var index = i;
            var response = Responses[i];
            <div @onclick="async () => await SendResponse(index)"
                 class="response-tile">
                <span>@(i+1)</span>
                <p class="@GetStyle(response)">@response</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Question { get; set; }
    [Parameter]
    public string Pronunciation { get; set; }
    [Parameter]
    public string CorrectResponse { get; set; }
    [Parameter]
    public IList<string> Responses { get; set; }
    [Parameter]
    public EventCallback<string> OnClick { get; set; }
    [Parameter]
    public string Audio { get; set; }

    HotKeysContext HotKeysContext;
    private List<Keys> keyList = new List<Keys> { Keys.Num1, Keys.Num2, Keys.Num3, Keys.Num4,
        Keys.Num5, Keys.Num6, Keys.Num7, Keys.Num8, Keys.Num9};

    protected override void OnInitialized()
    {
        this.HotKeysContext = this.HotKeys.CreateContext();
        for (var i = 0; i < Responses.Count(); i++)
        {
            var index = i;
            this.HotKeysContext.Add(ModKeys.None, keyList[i], async () => { await SendResponse(index); });
        }
    }

    private string GetStyle(string input) {
        if (input.Length >= 65) return "smallest";
        if (input.Length >= 45) return "smaller";
        if (input.Length >= 25) return "small";
        return string.Empty;
    }

    private async Task SendResponse(int i)
    {
        StateHasChanged();
        await OnClick.InvokeAsync(Responses[i]);
    }

    public void Dispose()
    {
        this.HotKeysContext.Dispose();
    }
}
