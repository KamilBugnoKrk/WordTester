@* Copyright (C) 2021  Kamil Bugno
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.*@

@page "/learning/{courseId}"
@inject ILearningApi learningApi
@inject NavigationManager navigationManager
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<div class="learning-container">
    @if (learningModel != null)
    {
        if (numberOfRepetition % 10 == 0)
        {
            <MessageToUser Message="You practice very hard. Would you like to continue?"
                           ImagePath="/assets/question.svg" 
                           OnClick="RetrieveData"
                           HasContinueButton="true"/>
        }
        else if (learningModel.ResponseType == ResponseType.NothingToLearnResponse)
        {
            <MessageToUser Message="Congrats! You have learned everything at the moment. Please try again later to practice your knowledge."
                           ImagePath="/assets/nothingToLearn.svg" />
        }
        else if (learningModel.ResponseType == ResponseType.InformationalResponse)
        {
            <Informational WordDto="@learningModel.InformationalWord" OnClick="SendResponse" />
        }
        else if (learningModel.ResponseType == ResponseType.ErrorResponse)
        {
            <MessageToUser Message="Something went wrong. Please try again."
                           ImagePath="/assets/error.svg" />
        }
        else if (learningModel.ResponseType == ResponseType.PracticeResponse)
        {
            <Practice LearningModel="@learningModel"
                      OnClick="@SendResponse"
                      CorrectWord="@correctWord"
                      IsResponseSent="@isResponseSent"
                      UserResponse="@userResponse" />
        }
    }
    else
    {
        <h4>Loading...</h4>
    }
</div>

@code {
    [Parameter]
    public string CourseId { get; set; }

    private GetLearningRepetitionResponseModel learningModel = null;
    private string userResponse = string.Empty;
    private bool isResponseSent = false;
    private WordDto correctWord;
    private int numberOfRepetition = 1;

    protected override async Task OnInitializedAsync()
    {
        await RetrieveData();
    }

    private async Task RetrieveData()
    {
        if (int.TryParse(CourseId, out int courseIdNumber))
        {
            learningModel = await learningApi.GetLearningData(courseIdNumber);
        }
        isResponseSent = false;
        userResponse = string.Empty;
        correctWord = null;
        numberOfRepetition++;
        StateHasChanged();
        
    }

    private async Task SendResponse(string response)
    {
        userResponse = response;
        var result = await learningApi.PostLearningRepetition(learningModel.WordId, userResponse, learningModel.RepetitionType);
        if (result.IsCorrectAnswer)
        {
            await RetrieveData();
            return;
        }

        correctWord = result.CorrectWord;
        isResponseSent = true;
    }
}
