@page "/login"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<div class="login-container">
    <div class="header">
        <h4 class="text-center">Login</h4>
    </div>
    <div class="form-container">
        <div class="login-body">
            <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginParameters">
                <DataAnnotationsValidator />

                <MatTextField @bind-Value="loginParameters.UserName" autofocus Label="Username" />
                <ValidationMessage For="@(() => loginParameters.UserName)" />

                <MatTextField Type="password" Label="Password" @bind-Value="loginParameters.Password" />
                <ValidationMessage For="@(() => loginParameters.Password)" />

                <div class="form-check m-3">
                    <MatCheckbox id="inputRememberMe" Label="Remember Me" @bind-Value="@loginParameters.RememberMe" />
                </div>

                <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>

                <label class="text-danger">@error</label>
                <h6 style="font-size: 17px;" class="font-weight-normal text-center"><a href="/register">Create account</a></h6>
            </EditForm>
        </div>
        <div class="login-image">
            <img src="/assets/login.png" />
        </div>
    </div>
</div>

@code{
    LoginParameters loginParameters { get; set; } = new LoginParameters();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
