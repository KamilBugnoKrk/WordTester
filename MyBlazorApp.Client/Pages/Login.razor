@page "/login"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginParameters">
    <DataAnnotationsValidator />
    <h4 class="font-weight-normal text-center">Login</h4>

    <MatTextField @bind-Value="loginParameters.UserName" autofocus Label="Username" />
    <ValidationMessage For="@(() => loginParameters.UserName)" />

    <MatTextField Type="password" Label="Password" @bind-Value="loginParameters.Password" />
    <ValidationMessage For="@(() => loginParameters.Password)" />

    <div class="form-check m-3">
        <MatCheckbox id="inputRememberMe" Label="Remember Me" @bind-Value="@loginParameters.RememberMe" />
    </div>

    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>

    <label class="text-danger">@error</label>

    <NavLink href="register">
        <h6 style="font-size: 17px;" class="font-weight-normal text-center">Create account</h6>
    </NavLink>
</EditForm>

@code{
    LoginParameters loginParameters { get; set; } = new LoginParameters();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}