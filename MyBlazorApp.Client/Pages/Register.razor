@page "/register"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<div class="login-container">
    <div class="header">
        <h4 class="text-center">Create Account</h4>
        <p style="font-size: 17px; margin: 0px 20px 0px 20px;">
            It is free and open source.
        </p>
    </div>
    <div class="form-container">
        <div class="login-body">
            <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerParameters">
                <DataAnnotationsValidator />

                <label for="inputUsername" class="sr-only">User Name</label>
                <MatTextField id="inputUsername" Label="Username" autofocus @bind-Value="@registerParameters.UserName" />
                <ValidationMessage For="@(() => registerParameters.UserName)" />

                <label for="inputPassword" class="sr-only">Password</label>
                <MatTextField Type="password" id="inputPassword" Label="Password" @bind-Value="@registerParameters.Password" OnInput="@(e => registerParameters.Password = e.Value.ToString())" />
                <ValidationMessage For="@(() => registerParameters.Password)" />

                <p style="font-size: 11px; margin-bottom: 5px;">
                    Requirements:
                    <ul style="margin-bottom: 0">
                        <li>
                            @if (HasSixChars())
                            {
                                <span>✅</span>
                            }
                            else
                            {
                                <span>❌</span>
                            }
                            Password should have at least six characters
                        </li>
                        <li>
                            @if (HasUppercase())
                            {
                                <span>✅</span>
                            }
                            else
                            {
                                <span>❌</span>
                            }
                            Password should include at least one uppercase
                        </li>
                    </ul>
                </p>

                <label for="inputPasswordConfirm" class="sr-only">Password Confirmation</label>
                <MatTextField Type="password" id="inputPasswordConfirm" Label="Password Confirmation" @bind-Value="@registerParameters.PasswordConfirm" />
                <ValidationMessage For="@(() => registerParameters.PasswordConfirm)" />

                <div id="terms">
                    <MatCheckbox id="termsConfirmation" @bind-Value="areTermsAccepted" />
                    <p>I agree to the <a href="/terms" target="_blank">Terms</a> & <a href="/privacy" target="_blank">Privacy</a>.</p>
                </div>

                <div style="margin-bottom: 5px; transform: scale(0.94); -webkit-transform: scale(0.94); transform-origin: 0 0; -webkit-transform-origin: 0 0;">
                    <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6LfAwsUaAAAAAA0WXVyqnvFLAG7TMeHPSWyXDZ4Q" OnSuccess="OnSuccess" OnExpired="OnExpired" isError="isError" />
                </div>

                <button class="btn" type="submit" disabled="@IsSumbitDisabled()">Create account</button>

                <label class="text-danger">@error</label>
                <h6 style="font-size: 17px;" class="font-weight-normal text-center">Already have an account? <a href="login">Login here</a></h6>
            </EditForm>
        </div>
        <div class="login-image">
            <img src="/assets/login.png" />
        </div>
    </div>
</div>

@functions{

    RegisterParameters registerParameters { get; set; } = new RegisterParameters();
    string error { get; set; }
    private ReCAPTCHA reCAPTCHAComponent;
    private bool ValidReCAPTCHA = false;
    private bool isError = false;
    private bool areTermsAccepted = false;

    private bool IsSumbitDisabled() {
        return !(ValidReCAPTCHA && HasSixChars() && HasUppercase() && areTermsAccepted);
    }

    private bool HasSixChars() {
        return registerParameters.Password != null && registerParameters.Password.Count() > 6;
    }
    private bool HasUppercase() {
        return registerParameters.Password != null && registerParameters.Password.Any(char.IsUpper);
    }

    private void OnSuccess()
    {
        isError = false;
        error = String.Empty;
        ValidReCAPTCHA = true;
    }

    private void OnExpired()
    {
        ValidReCAPTCHA = false;
        error = String.Empty;
    }

    async Task OnSubmit()
    {
        if (ValidReCAPTCHA && !isError)
        {
            error = null;
            var response = await reCAPTCHAComponent.GetResponseAsync();
            try
            {
                isError = false;
                StateHasChanged();
                registerParameters.CaptchaResponse = response;
                await authStateProvider.Register(registerParameters);
                navigationManager.NavigateTo("");
            }
            catch (Exception ex) when (!ex.Message.Contains("tools.ietf.org"))
            {
                error = ex.Message;
                isError = true;
                StateHasChanged();
            }
            catch (Exception ex) when (ex.Message.Contains("tools.ietf.org"))
            {
                error = "You need to use reCAPTCHA";
                isError = true;
                StateHasChanged();
            }
        }
        else
        {
            isError = true;
            error = "You need to use reCAPTCHA";
        }
    }
}
