@* Copyright (C) 2021  Kamil Bugno
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.*@

@inject IWordApi wordApi

@if (model != null)
{
    <EditForm Model="model" OnValidSubmit="@SaveWord">
        <div class="edit-word-container">
            <DataAnnotationsValidator />

            <MatTextField @bind-Value="model.OriginalWord" Label="Original Word" autofocus />
            <ValidationMessage For="@(() => model.OriginalWord)" />

            <MatTextField @bind-Value="model.Pronunciation" Label="Pronunciation" autofocus />
            <ValidationMessage For="@(() => model.Pronunciation)" />

            <MatTextField @bind-Value="model.TranslatedWord" autofocus Label="Translated Word" />
            <ValidationMessage For="@(() => model.TranslatedWord)" />

            <MatTextField TextArea="true" @bind-Value="model.Definition" autofocus Label="Definition" />
            <ValidationMessage For="@(() => model.Definition)" />

            <MatTextField TextArea="true" @bind-Value="model.ExampleUse" autofocus Label="Example Use" />
            <ValidationMessage For="@(() => model.ExampleUse)" />

            <button class="btn" type="submit">Save</button>
            @if (model.Id != 0)
             {
                <span @onclick="@DeleteWord" class="delete">Delete word</span>
             }
        </div>
    </EditForm>
}

@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public WordDto Word { get; set; }
    [Parameter] public int CourseId { get; set; }
    private WordDto model;

    protected override Task OnInitializedAsync()
    {
        if (Word != null)
            model = Word;
        else
            model = new WordDto();

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        if (Word != null)
            model = Word;
        else
            model = new WordDto();
    }

    async Task SaveWord()
    {
        await wordApi.PostWord(model, CourseId);
        await ModalInstance.CloseAsync(ModalResult.Ok(true));
    }

    async Task DeleteWord()
    {
        await wordApi.DeleteWord(model.Id);
        await ModalInstance.CloseAsync(ModalResult.Ok(true));
    }

}